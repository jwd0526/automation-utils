# React Component Generator YAML Template
# This file defines multiple components that can be batch-generated

components:
  # Basic Button Component
  - name: Button
    type: tsx  # tsx, jsx, auto (auto-detect from project)
    output:
      directory: src/components/ui
      style: css  # css, scss, tailwind, styled, none
    props:
      - name: children
        type: React.ReactNode
        required: false
      - name: variant
        type: "'primary' | 'secondary' | 'danger'"
        required: false
        default: "'primary'"
      - name: size
        type: "'sm' | 'md' | 'lg'"
        required: false
        default: "'md'"
      - name: onClick
        type: "() => void"
        required: false
      - name: disabled
        type: boolean
        required: false
        default: false
    structure:
      emmet: "button.btn[type=button]>span.btn-text"
      # Alternative: manual JSX structure
      # jsx: |
      #   <button
      #     className={`btn btn-${props.variant} btn-${props.size}`}
      #     onClick={props.onClick}
      #     disabled={props.disabled}
      #   >
      #     <span className="btn-text">{props.children}</span>
      #   </button>

  # Modal Dialog Component
  - name: Modal
    type: tsx
    output:
      directory: src/components/overlays
      style: scss
    props:
      - name: isOpen
        type: boolean
        required: true
      - name: title
        type: string
        required: true
      - name: children
        type: React.ReactNode
        required: false
      - name: onClose
        type: "() => void"
        required: true
      - name: size
        type: "'sm' | 'md' | 'lg' | 'xl'"
        required: false
        default: "'md'"
      - name: closeOnOverlayClick
        type: boolean
        required: false
        default: true
    structure:
      emmet: "div.modal-overlay>div.modal.modal-${size}>div.modal-header>h2.modal-title{${title}}+button.modal-close[aria-label='Close']^div.modal-body+div.modal-footer"
    hooks:
      - useEffect  # Adds useEffect import and basic structure
      - useState   # Adds useState import
    custom:
      # Custom logic that could be injected
      effects:
        - trigger: "isOpen"
          action: "document.body.style.overflow = isOpen ? 'hidden' : 'auto'"

  # Form Input Component
  - name: FormInput
    type: tsx
    output:
      directory: src/components/forms
      style: scss
    props:
      - name: label
        type: string
        required: true
      - name: name
        type: string
        required: true
      - name: type
        type: "'text' | 'email' | 'password' | 'number'"
        required: false
        default: "'text'"
      - name: value
        type: string
        required: false
      - name: placeholder
        type: string
        required: false
      - name: error
        type: string
        required: false
      - name: required
        type: boolean
        required: false
        default: false
      - name: onChange
        type: "(value: string) => void"
        required: false
    structure:
      emmet: "div.form-group>label.form-label[for=${name}]{${label}}+input.form-input[type=${type}][name=${name}][placeholder=${placeholder}]+span.form-error{${error}}"

  # Product Card Component
  - name: ProductCard
    type: jsx  # Force JavaScript for this component
    output:
      directory: src/components/commerce
      style: tailwind
    props:
      - name: product
        type: "{ id: string; name: string; price: number; image: string; description?: string }"
        required: true
      - name: onAddToCart
        type: "(productId: string) => void"
        required: false
      - name: showDescription
        type: boolean
        required: false
        default: true
    structure:
      emmet: "article.bg-white.rounded-lg.shadow-md.overflow-hidden>img.w-full.h-48.object-cover[src=${product.image}][alt=${product.name}]+div.p-4>h3.text-lg.font-semibold.mb-2{${product.name}}+p.text-gray-600.mb-4{${product.description}}+div.flex.justify-between.items-center>span.text-xl.font-bold.text-green-600{$${product.price}}+button.bg-blue-500.text-white.px-4.py-2.rounded.hover:bg-blue-600{Add to Cart}"

  # Layout Header Component
  - name: Header
    type: tsx
    output:
      directory: src/components/layout
      style: scss
    props:
      - name: title
        type: string
        required: true
      - name: user
        type: "{ name: string; avatar?: string } | null"
        required: false
      - name: onMenuClick
        type: "() => void"
        required: false
      - name: showSearch
        type: boolean
        required: false
        default: true
    structure:
      emmet: "header.site-header>div.container>div.header-content>button.menu-btn[aria-label='Menu']>span.sr-only{Menu}^h1.site-title{${title}}^div.header-actions>div.search-container>input[type=search][placeholder='Search...']^div.user-menu"
    imports:
      # Additional imports beyond React
      - from: "./UserMenu"
        import: "UserMenu"
      - from: "react-icons/hi"
        import: "{ HiMenu, HiSearch }"

# Global Configuration
config:
  # Default settings for all components
  defaults:
    type: auto  # tsx, jsx, auto
    style: css
    directory: src/components

  # Style presets
  stylePresets:
    theme:
      primary: "#3b82f6"
      secondary: "#64748b"
      danger: "#ef4444"
      success: "#10b981"

  # Custom templates for different component types
  templates:
    page:
      structure: "div.page>header.page-header+main.page-content+footer.page-footer"
      style: scss
    form:
      structure: "form.form>div.form-header+div.form-body+div.form-footer"
      hooks: ["useState", "useCallback"]

  # File naming conventions
  naming:
    component: "PascalCase"  # Button.tsx
    style: "kebab-case"      # button.scss (matches component name)

  # Output structure options
  output:
    # flat: all files in one directory
    # grouped: each component gets its own folder
    # typed: organized by component type (ui/, forms/, layout/)
    structure: flat