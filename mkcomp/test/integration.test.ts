import * as path from 'path';
import { ReactComponentGenerator } from '../src/generator';
import { CliArgs, StyleType } from '../src/types';
import { TestRunner, TestAssertions, TestHelpers, TEST_TMP_DIR } from './utils/testHelpers';

const runner = new TestRunner();

runner.setup(() => {
  TestHelpers.setupTestDir();
});

runner.teardown(() => {
  TestHelpers.cleanupTestDir();
});

// Helper to create default args
function createArgs(overrides: Partial<CliArgs> = {}): CliArgs {
  const args = {
    componentName: 'TestComponent',
    props: '',
    dir: TEST_TMP_DIR,
    style: 'css' as StyleType,
    emmet: '',
    test: false,
    jsx: false,
    tsx: false,
    help: false,
    ...overrides
  };

  // Generate originalCommand based on the args
  const commandParts = ['mkcomp', args.componentName];

  if (args.props) commandParts.push('-p', `"${args.props}"`);
  if (args.dir !== TEST_TMP_DIR) commandParts.push('-d', args.dir);
  if (args.style !== 'css') commandParts.push('-s', args.style);
  if (args.emmet) commandParts.push('-e', `"${args.emmet}"`);
  if (args.test) commandParts.push('--test');
  if (args.jsx) commandParts.push('--jsx');
  if (args.tsx) commandParts.push('--tsx');

  return {
    ...args,
    originalCommand: commandParts.join(' ')
  };
}

runner.test('Integration - Basic TypeScript component generation', async () => {
  TestHelpers.createTsConfigInTestDir();

  const args = createArgs({
    componentName: 'Button',
    tsx: true
  });

  const generator = new ReactComponentGenerator(args);
  await generator.generate();

  TestAssertions.assertTrue(TestHelpers.fileExists('Button.tsx'));
  TestAssertions.assertTrue(TestHelpers.fileExists('Button.css'));

  const componentContent = TestHelpers.readFile('Button.tsx');
  TestAssertions.assertContains(componentContent, "import React from 'react';");
  TestAssertions.assertContains(componentContent, "import './Button.css';");
  TestAssertions.assertContains(componentContent, 'const Button = () => {');
  TestAssertions.assertContains(componentContent, 'export default Button;');
  TestAssertions.assertContains(componentContent, '<div className="container"></div>');

  // Verify command header is present
  TestAssertions.assertContains(componentContent, 'Generated by mkcomp');
  TestAssertions.assertContains(componentContent, 'mkcomp Button --tsx');

  const styleContent = TestHelpers.readFile('Button.css');
  TestAssertions.assertContains(styleContent, '/* Generated styles */');
  TestAssertions.assertContains(styleContent, '.container {');

  // Verify style command header is present
  TestAssertions.assertContains(styleContent, 'Generated by mkcomp');
  TestAssertions.assertContains(styleContent, 'mkcomp Button --tsx');
});

runner.test('Integration - JavaScript component with PropTypes', async () => {
  const args = createArgs({
    componentName: 'Button',
    jsx: true,
    props: 'text:string,onClick:()=>void'
  });

  const generator = new ReactComponentGenerator(args);
  await generator.generate();

  TestAssertions.assertTrue(TestHelpers.fileExists('Button.jsx'));
  TestAssertions.assertTrue(TestHelpers.fileExists('Button.css'));

  const componentContent = TestHelpers.readFile('Button.jsx');
  TestAssertions.assertContains(componentContent, "import React from 'react';");
  TestAssertions.assertContains(componentContent, "import PropTypes from 'prop-types';");
  TestAssertions.assertContains(componentContent, 'const Button = (props) => {');
  TestAssertions.assertContains(componentContent, 'Button.propTypes = {');
  TestAssertions.assertContains(componentContent, 'text: PropTypes.string.isRequired');
  TestAssertions.assertContains(componentContent, 'onClick: PropTypes.func.isRequired');
});

runner.test('Integration - Component with complex props and children', async () => {
  const args = createArgs({
    componentName: 'Modal',
    tsx: true,
    props: 'title:string,isOpen:boolean,onClose:()=>void,size?:string,children'
  });

  const generator = new ReactComponentGenerator(args);
  await generator.generate();

  const componentContent = TestHelpers.readFile('Modal.tsx');
  TestAssertions.assertContains(componentContent, 'interface ModalProps {');
  TestAssertions.assertContains(componentContent, 'title: string;');
  TestAssertions.assertContains(componentContent, 'isOpen: boolean;');
  TestAssertions.assertContains(componentContent, 'onClose: ()=>void;');
  TestAssertions.assertContains(componentContent, 'size?: string;');
  TestAssertions.assertContains(componentContent, 'children?: React.ReactNode;');
  TestAssertions.assertContains(componentContent, 'const Modal = (props: ModalProps) => {');
});

runner.test('Integration - SCSS styling', async () => {
  const args = createArgs({
    componentName: 'Card',
    style: 'scss',
    emmet: 'div.card>h2.title+p.description',
    jsx: true // Force JSX to avoid auto-detection
  });

  const generator = new ReactComponentGenerator(args);
  await generator.generate();

  TestAssertions.assertTrue(TestHelpers.fileExists('Card.jsx'));
  TestAssertions.assertTrue(TestHelpers.fileExists('Card.scss'));

  const componentContent = TestHelpers.readFile('Card.jsx');
  TestAssertions.assertContains(componentContent, "import './Card.scss';");

  const styleContent = TestHelpers.readFile('Card.scss');
  TestAssertions.assertContains(styleContent, '// Generated styles');
  TestAssertions.assertContains(styleContent, '.card {');
  TestAssertions.assertContains(styleContent, '.title {');
  TestAssertions.assertContains(styleContent, '.description {');
  TestAssertions.assertContains(styleContent, '// Add your styles here');
});

runner.test('Integration - Tailwind styling (no CSS file)', async () => {
  const args = createArgs({
    componentName: 'Badge',
    style: 'tailwind',
    emmet: 'span.inline-flex.items-center.px-2',
    jsx: true // Force JSX to avoid auto-detection
  });

  const generator = new ReactComponentGenerator(args);
  await generator.generate();

  TestAssertions.assertTrue(TestHelpers.fileExists('Badge.jsx'));
  TestAssertions.assertTrue(!TestHelpers.fileExists('Badge.css'));
  TestAssertions.assertTrue(!TestHelpers.fileExists('Badge.scss'));

  const componentContent = TestHelpers.readFile('Badge.jsx');
  TestAssertions.assertNotContains(componentContent, "import './Badge.css");
  TestAssertions.assertNotContains(componentContent, "import './Badge.scss");
  TestAssertions.assertContains(componentContent, 'className="inline-flex items-center px-2"');
});

runner.test('Integration - Complex Emmet structure', async () => {
  const args = createArgs({
    componentName: 'ProductCard',
    emmet: 'div.card>img.image[src=""]+div.content>h3.title+p.price+button#buy-btn.btn.primary',
    jsx: true // Force JSX to avoid auto-detection
  });

  const generator = new ReactComponentGenerator(args);
  await generator.generate();

  TestAssertions.assertTrue(TestHelpers.fileExists('ProductCard.jsx'));
  TestAssertions.assertTrue(TestHelpers.fileExists('ProductCard.css'));

  const componentContent = TestHelpers.readFile('ProductCard.jsx');
  TestAssertions.assertContains(componentContent, 'className="card"');
  TestAssertions.assertContains(componentContent, 'className="image"');
  TestAssertions.assertContains(componentContent, 'className="content"');
  TestAssertions.assertContains(componentContent, 'className="title"');
  TestAssertions.assertContains(componentContent, 'className="price"');
  TestAssertions.assertContains(componentContent, 'id="buy-btn"');
  TestAssertions.assertContains(componentContent, 'className="btn primary"');

  const styleContent = TestHelpers.readFile('ProductCard.css');
  TestAssertions.assertContains(styleContent, '.card {');
  TestAssertions.assertContains(styleContent, '.image {');
  TestAssertions.assertContains(styleContent, '.content {');
  TestAssertions.assertContains(styleContent, '.title {');
  TestAssertions.assertContains(styleContent, '.price {');
  TestAssertions.assertContains(styleContent, '.btn {');
  TestAssertions.assertContains(styleContent, '.primary {');
  TestAssertions.assertContains(styleContent, '#buy-btn {');
});

runner.test('Integration - Command headers verification', async () => {
  const args = createArgs({
    componentName: 'HeaderTest',
    props: 'title:string,count:number',
    style: 'scss',
    emmet: 'div.header>h1.title',
    jsx: true
  });

  const generator = new ReactComponentGenerator(args);
  await generator.generate();

  const componentContent = TestHelpers.readFile('HeaderTest.jsx');
  const styleContent = TestHelpers.readFile('HeaderTest.scss');

  // Verify component header format
  TestAssertions.assertContains(componentContent, '// Generated by mkcomp');
  TestAssertions.assertContains(componentContent, '// Command: mkcomp HeaderTest -p "title:string,count:number" -s scss -e "div.header>h1.title" --jsx');
  TestAssertions.assertContains(componentContent, '// Generated at:');

  // Verify style header format
  TestAssertions.assertContains(styleContent, '// Generated by mkcomp');
  TestAssertions.assertContains(styleContent, '// Command: mkcomp HeaderTest -p "title:string,count:number" -s scss -e "div.header>h1.title" --jsx');
  TestAssertions.assertContains(styleContent, '// Generated at:');
});

runner.test('Integration - Test mode (preview only)', async () => {
  const args = createArgs({
    componentName: 'PreviewComponent',
    test: true,
    props: 'title:string',
    jsx: true // Force JSX to avoid auto-detection
  });

  const originalLog = console.log;
  const logs: string[] = [];
  console.log = (msg: string) => logs.push(msg);

  try {
    const generator = new ReactComponentGenerator(args);
    await generator.generate();

    TestAssertions.assertTrue(logs.some(log => log.includes('PREVIEW MODE')));
    TestAssertions.assertTrue(logs.some(log => log.includes('PreviewComponent.jsx')));

    // No files should be created
    TestAssertions.assertTrue(!TestHelpers.fileExists('PreviewComponent.jsx'));
    TestAssertions.assertTrue(!TestHelpers.fileExists('PreviewComponent.tsx'));
    TestAssertions.assertTrue(!TestHelpers.fileExists('PreviewComponent.css'));
  } finally {
    console.log = originalLog;
  }
});

runner.test('Integration - Custom directory creation', async () => {
  const customDir = path.join(TEST_TMP_DIR, 'components', 'ui', 'forms');
  const args = createArgs({
    componentName: 'FormInput',
    dir: customDir,
    jsx: true // Force JSX to avoid auto-detection
  });

  const generator = new ReactComponentGenerator(args);
  await generator.generate();

  // Check if files exist in the custom directory
  const formInputJsx = path.join(customDir, 'FormInput.jsx');
  const formInputCss = path.join(customDir, 'FormInput.css');

  TestAssertions.assertTrue(require('fs').existsSync(formInputJsx));
  TestAssertions.assertTrue(require('fs').existsSync(formInputCss));
});

runner.test('Integration - Auto-detect TypeScript project', async () => {
  TestHelpers.createTsConfigInTestDir();

  const originalCwd = process.cwd();
  process.chdir(TEST_TMP_DIR);

  try {
    const args = createArgs({
      componentName: 'AutoDetect'
    });

    const generator = new ReactComponentGenerator(args);
    await generator.generate();

    TestAssertions.assertTrue(TestHelpers.fileExists('AutoDetect.tsx'));
    const content = TestHelpers.readFile('AutoDetect.tsx');
    TestAssertions.assertNotContains(content, "import PropTypes");
  } finally {
    process.chdir(originalCwd);
  }
});

runner.test('Integration - No style generation for none style type', async () => {
  const args = createArgs({
    componentName: 'PlainComponent',
    style: 'none',
    emmet: 'div.wrapper>p.text',
    jsx: true // Force JSX to avoid auto-detection
  });

  const generator = new ReactComponentGenerator(args);
  await generator.generate();

  TestAssertions.assertTrue(TestHelpers.fileExists('PlainComponent.jsx'));
  TestAssertions.assertTrue(!TestHelpers.fileExists('PlainComponent.css'));
  TestAssertions.assertTrue(!TestHelpers.fileExists('PlainComponent.scss'));

  const componentContent = TestHelpers.readFile('PlainComponent.jsx');
  TestAssertions.assertNotContains(componentContent, "import './PlainComponent.css");
  TestAssertions.assertContains(componentContent, '<div className="wrapper">');
  TestAssertions.assertContains(componentContent, '<p className="text">');
});

runner.test('Integration - Real-world modal example', async () => {
  const args = createArgs({
    componentName: 'ConfirmDialog',
    tsx: true,
    props: 'title:string,message:string,isOpen:boolean,onConfirm:()=>void,onCancel:()=>void,confirmText?:string,cancelText?:string',
    style: 'scss',
    emmet: 'div.modal-overlay>div.modal>div.modal-header>h2.title^div.modal-body>p.message^div.modal-footer>button.btn.cancel+button.btn.confirm.primary'
  });

  const generator = new ReactComponentGenerator(args);
  await generator.generate();

  const componentContent = TestHelpers.readFile('ConfirmDialog.tsx');
  TestAssertions.assertContains(componentContent, 'interface ConfirmDialogProps {');
  TestAssertions.assertContains(componentContent, 'title: string;');
  TestAssertions.assertContains(componentContent, 'message: string;');
  TestAssertions.assertContains(componentContent, 'isOpen: boolean;');
  TestAssertions.assertContains(componentContent, 'onConfirm: ()=>void;');
  TestAssertions.assertContains(componentContent, 'onCancel: ()=>void;');
  TestAssertions.assertContains(componentContent, 'confirmText?: string;');
  TestAssertions.assertContains(componentContent, 'cancelText?: string;');

  TestAssertions.assertContains(componentContent, '<div className="modal-overlay">');
  TestAssertions.assertContains(componentContent, '<div className="modal">');
  TestAssertions.assertContains(componentContent, '<h2 className="title">');
  TestAssertions.assertContains(componentContent, '<p className="message">');
  TestAssertions.assertContains(componentContent, '<button className="btn cancel">');
  TestAssertions.assertContains(componentContent, '<button className="btn confirm primary">');

  const styleContent = TestHelpers.readFile('ConfirmDialog.scss');
  TestAssertions.assertContains(styleContent, '.modal-overlay {');
  TestAssertions.assertContains(styleContent, '.modal {');
  TestAssertions.assertContains(styleContent, '.modal-header {');
  TestAssertions.assertContains(styleContent, '.title {');
  TestAssertions.assertContains(styleContent, '.modal-body {');
  TestAssertions.assertContains(styleContent, '.message {');
  TestAssertions.assertContains(styleContent, '.modal-footer {');
  TestAssertions.assertContains(styleContent, '.btn {');
  TestAssertions.assertContains(styleContent, '.cancel {');
  TestAssertions.assertContains(styleContent, '.confirm {');
  TestAssertions.assertContains(styleContent, '.primary {');
});

export default runner;