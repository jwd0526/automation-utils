import { ComponentTemplate, ProjectType, StyleType } from '../types';
import { PropsParser } from './propsParser';

export class ComponentTemplateGenerator {
  static generate(
    componentName: string,
    propsString: string,
    jsxContent: string,
    projectType: ProjectType,
    styleType: StyleType,
    originalCommand?: string
  ): ComponentTemplate {
    const isTypeScript = projectType === 'tsx';
    const { interface: propsInterface, propTypes } = PropsParser.parse(propsString, componentName);

    const header = this.generateHeader(originalCommand, isTypeScript);
    const imports = this.generateImports(componentName, isTypeScript, styleType);
    const component = this.generateComponent(componentName, propsString, jsxContent, isTypeScript, propsInterface, propTypes);

    return {
      imports,
      component,
      fullContent: header + imports + '\n\n' + component
    };
  }

  private static generateHeader(originalCommand?: string, isTypeScript?: boolean): string {
    if (!originalCommand) return '';

    const commentStyle = isTypeScript ? '//' : '//';
    const timestamp = new Date().toISOString();

    return `${commentStyle} Generated by React Component Generator\n${commentStyle} Command: ${originalCommand}\n${commentStyle} Generated at: ${timestamp}\n\n`;
  }

  private static generateImports(componentName: string, isTypeScript: boolean, styleType: StyleType): string {
    const imports: string[] = ["import React from 'react';"];

    if (!isTypeScript) {
      imports.push("import PropTypes from 'prop-types';");
    }

    if (styleType === 'css') {
      imports.push(`import './${componentName}.css';`);
    } else if (styleType === 'scss') {
      imports.push(`import './${componentName}.scss';`);
    }

    return imports.join('\n');
  }

  private static generateComponent(
    componentName: string,
    propsString: string,
    jsxContent: string,
    isTypeScript: boolean,
    propsInterface: string,
    propTypes: string
  ): string {
    let component = '';

    if (isTypeScript && propsInterface) {
      component += propsInterface + '\n\n';
    }

    const propsParam = propsString ?
      (isTypeScript ? `props: ${componentName}Props` : 'props') : '';

    component += `const ${componentName} = (${propsParam}) => {\n`;
    component += `  return (\n${this.indentJsx(jsxContent, 4)}\n  );\n`;
    component += `};\n\n`;

    if (!isTypeScript && propTypes) {
      component += propTypes + '\n\n';
    }

    component += `export default ${componentName};`;

    return component;
  }

  private static indentJsx(jsx: string, spaces: number): string {
    const indent = ' '.repeat(spaces);
    return jsx
      .split('\n')
      .map(line => line.trim() ? indent + line : line)
      .join('\n');
  }
}